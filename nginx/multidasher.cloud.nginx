server {
  listen 80;
  listen [::]:80;
  server_name www.CHANGEME;

  access_log /var/log/multidasher/nginx.access.log;
  error_log  /var/log/multidasher/nginx.error.log;

  location / {
      rewrite ^ https://CHANGEME$request_uri? permanent;
   }
}

server {
  listen 80;
  listen [::]:80;
  server_name CHANGEME;

  access_log /var/log/multidasher/nginx.access.log;
  error_log  /var/log/multidasher/nginx.error.log;

  location / {
    rewrite ^ https://$host$request_uri? permanent;
  }
}

server {
    server_name CHANGEME;
    root /var/www/multidasher/drupal/web; ## <-- Your only path reference.

    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    ssl_certificate /etc/letsencrypt/live/CHANGEME/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/CHANGEME/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/CHANGEME/fullchain.pem;

    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }

    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
    }

    # Very rarely should these ever be accessed outside of your lan
    location ~* \.(txt|log)$ {
        allow 192.168.0.0/16;
        deny all;
    }

    location ~ \..*/.*\.php$ {
        return 403;
    }

    location ~ ^/sites/.*/private/ {
        return 403;
    }

    # Block access to scripts in site files directory
    location ~ ^/sites/[^/]+/files/.*\.php$ y{
        deny all;
    }

    # Allow "Well-Known URIs" as per RFC 5785
    location ~* ^/.well-known/ {
        allow all;
    }

    # Block access to "hidden" files and directories whose names begin with a
    # period. This includes directories used by version control systems such
    # as Subversion or Git to store control files.
    location ~ (^|/)\. {
        return 403;
    }

    location / {
        # try_files $uri @rewrite; # For Drupal <= 6
        try_files $uri /index.php?$query_string; # For Drupal >= 7
    }

    location /app {
      root  /var/www/multidasher/angular/app/;
      index index.html index.htm;
      try_files $uri $uri/ /index.html$is_args$args;
      keepalive_timeout 5;
      charset utf-8;
    }

    location @rewrite {
        rewrite ^/(.*)$ /index.php?q=$1;
    }

    # Don't allow direct access to PHP files in the vendor directory.
    location ~ /vendor/.*\.php$ {
        deny all;
        return 404;
    }

    # In Drupal 8, we must also match new paths where the '.php' appears in
    # the middle, such as update.php/selection. The rule we use is strict,
    # and only allows this pattern with the update.php front controller.
    # This allows legacy path aliases in the form of
    # blog/index.php/legacy-path to continue to route to Drupal nodes. If
    # you do not have any paths like that, then you might prefer to use a
    # laxer rule, such as:
    #   location ~ \.php(/|$) {
    # The laxer rule will continue to work if Drupal uses this new URL
    # pattern with front controllers other than update.php in a future
    # release.
    location ~ '\.php$|^/update.php' {
      include snippets/fastcgi-php.conf;
      fastcgi_pass unix:/run/php/php7.2-fpm.sock;
    }

    # Fighting with Styles? This little gem is amazing.
    # location ~ ^/sites/.*/files/imagecache/ { # For Drupal <= 6
    location ~ ^/sites/.*/files/styles/ { # For Drupal >= 7
        try_files $uri @rewrite;
    }

    # Handle private files through Drupal. Private file's path can come
    # with a language prefix.
    location ~ ^(/[a-z\-]+)?/system/files/ { # For Drupal >= 7
        try_files $uri /index.php?$query_string;
    }

    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
        try_files $uri @rewrite;
        expires max;
        log_not_found off;
    }

}


server {
  listen 443 ssl http2;
  listen [::]:443 ssl http2;
  server_name www.CHANGEME;

  location / {
    return 301 https://CHANGEME$request_uri;
  }
}
